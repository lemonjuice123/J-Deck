#include <Wire.h>
#include <ESP8266WiFi.h>
#include "SSD1306.h"
#include <EEPROM.h>

extern "C" {
#include "user_interface.h"
typedef void (*wifi_promiscuous_cb_t)(uint8_t *buf, uint16_t len);
}

// Display settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
SSD1306 display(0x3c, D2, D1);  // GPIO 5 = D1, GPIO 4 = D2

// Button pins
#define BUTTON_UP D7
#define BUTTON_DOWN D3
#define BUTTON_SELECT D5
#define BUTTON_BACK D6
#define AUDIO_IN D8 // Audio input pin

//start display image 
#define LOGO_WIDTH 128
#define LOGO_HEIGHT 64

// WiFi settings
#define MAX_CH 13
#define PACKET_RATE 5
#define MAX_NETWORKS 8  // Maximum number of networks to display at once

// Radio settings
#define AM_MIN_FREQ 530    // 530 kHz
#define AM_MAX_FREQ 1700   // 1700 kHz
#define AM_STEP 10         // 10 kHz steps
#define FM_MIN_FREQ 87500  // 87.5 MHz
#define FM_MAX_FREQ 108000 // 108.0 MHz
#define FM_STEP 100        // 100 kHz steps

// Menu states
enum MenuState {
    MENU_MAIN,
    MENU_WIFI_SCAN,
    MENU_PACKET_MON,
    MENU_TERMINAL,
    MENU_RADIO,
    MENU_RADIO_SUB,
    MENU_RADIO_TRANSMIT
};
MenuState currentState = MENU_MAIN;
int selectedOption = 0;
bool buttonPressed = false;
int scrollOffset = 0;
int totalNetworks = 0;
bool isTransmitting = false;
bool isAM = true;  // true for AM, false for FM
// Struct to store network info
struct NetworkInfo {
    String ssid;
    int32_t rssi;
    uint8_t encType;
    uint8_t* bssid;
    int32_t channel;
};

// Radio variables
uint32_t currentAMFreq = 1000;  // Start at 1000 kHz
uint32_t currentFMFreq = 98700; // Start at 98.7 MHz
unsigned long lastFreqUpdate = 0;
#define FREQ_UPDATE_DELAY 100    // Delay between frequency updates

NetworkInfo networks[MAX_NETWORKS];

// Packet monitoring variables
unsigned long pkts = 0;
unsigned long deauths = 0;
unsigned long prevTime = 0;
int currentChannel = 1;
unsigned int values[128];
double multiplier = 1.0;



// Menu items
const char* mainMenu[] = {
    "WiFi Scan",
    "Packet Monitor",
    "Programmes",
    "Radio"
};
const int mainMenuItems = 4;
// Radio submenu items
const char* radioMenu[] = {
    "  AM Transmit",
    "  FM Transmit",
};
const int radioMenuItems = 2;

// image bitmap array

const unsigned char PROGMEM logo_bmp[] = {
};

// Function declarations
void ICACHE_RAM_ATTR wifiSnifferCallback(uint8_t *buf, uint16_t len);
void setupWiFiSniffer();
void drawMenu();
void handleButtons();
void scanNetworks();
void drawWiFiList();
void handleWiFiScan();
void handleTerminal();
void handleRadio();
void startTransmission(bool isAM);
void stopTransmission();
void drawRadioMenu();
void handleRadioSubmenu();
void updateFrequency(bool increase);
void drawTransmissionScreen();
void handleTransmission();
// Frequency handling functions
void updateFrequency(bool increase) {
    if (isAM) {
        if (increase) {
            currentAMFreq = min(currentAMFreq + AM_STEP, (uint32_t)AM_MAX_FREQ);
        } else {
            currentAMFreq = max(currentAMFreq - AM_STEP, (uint32_t)AM_MIN_FREQ);
        }
    } else {
        if (increase) {
            currentFMFreq = min(currentFMFreq + FM_STEP, (uint32_t)FM_MAX_FREQ);
        } else {
            currentFMFreq = max(currentFMFreq - FM_STEP, (uint32_t)FM_MIN_FREQ);
        }
    }
    
    // Update the carrier frequency
    uint32_t carrierFreq = isAM ? currentAMFreq * 1000 : currentFMFreq * 1000;
    analogWriteFreq(carrierFreq);
}

// Function implementations
void ICACHE_RAM_ATTR wifiSnifferCallback(uint8_t *buf, uint16_t len) {
    pkts++;
    if (buf[12] == 0xA0 || buf[12] == 0xC0) {
        deauths++;
    }
}

void setupWiFiSniffer() {
    wifi_set_opmode(STATION_MODE);
    wifi_promiscuous_enable(0);
    WiFi.disconnect();
    wifi_set_promiscuous_rx_cb((wifi_promiscuous_cb_t)wifiSnifferCallback);
    wifi_set_channel(currentChannel);
    wifi_promiscuous_enable(1);
}

void drawMenu() {
    display.clear();
    display.setTextAlignment(TEXT_ALIGN_LEFT);
    display.setFont(ArialMT_Plain_10);

    for (int i = 0; i < mainMenuItems; i++) {
        if (i == selectedOption) {
            display.drawString(0, i * 16, ">");
        }
        display.drawString(10, i * 16, mainMenu[i]);
    }
    display.display();
}


void drawPacketMonitor() {
    display.clear();
    display.setFont(ArialMT_Plain_10);
    
    // Draw header
    display.drawString(0, 0, "Ch:" + String(currentChannel));
    display.drawString(64, 0, "Pkts:" + String(pkts));
    display.drawString(0, 12, "Deauth:" + String(deauths));
    
    // Draw graph
    display.drawLine(0, 35, 127, 35);
    for (int i = 0; i < 127; i++) {
        int height = (values[i] * multiplier > 30) ? 30 : values[i] * multiplier;
        display.drawLine(i, 63, i, 63 - height);
    }
    
    display.display();
}

void handlePacketMonitor() {
    unsigned long currentTime = millis();
    
    // Channel switching with UP button (D3)
    if (digitalRead(BUTTON_UP) == LOW && !buttonPressed) {
        buttonPressed = true;
        currentChannel = (currentChannel % MAX_CH) + 1;
        wifi_set_channel(currentChannel);
        delay(200);
    }
    
    if (currentTime - prevTime >= 1000) {
        prevTime = currentTime;
        
        // Shift values left
        for (int i = 0; i < 127; i++) {
            values[i] = values[i + 1];
        }
        values[127] = pkts;
        
        // Calculate multiplier
        unsigned long maxVal = 1;
        for (int i = 0; i < 128; i++) {
            if (values[i] > maxVal) maxVal = values[i];
        }
        multiplier = (maxVal > 30) ? 30.0 / maxVal : 1;
        
        drawPacketMonitor();
        
        // Reset counters
        pkts = 0;
        deauths = 0;
    }
    
    // Check for back button
    if (digitalRead(BUTTON_BACK) == LOW && !buttonPressed) {
        buttonPressed = true;
        wifi_promiscuous_enable(0);
        WiFi.mode(WIFI_STA);
        currentState = MENU_MAIN;
        delay(200);
    }
}

void scanNetworks() {
    display.clear();
    display.setFont(ArialMT_Plain_10);
    display.setTextAlignment(TEXT_ALIGN_CENTER);
    display.drawString(64, 10, "Scanning...");
    display.display();
    
    WiFi.mode(WIFI_STA);
    WiFi.disconnect();
    delay(100);
    
    totalNetworks = WiFi.scanNetworks(false, true);
    
    // Store network information
    for(int i = 0; i < min(totalNetworks, MAX_NETWORKS); i++) {
        networks[i].ssid = WiFi.SSID(i);
        networks[i].rssi = WiFi.RSSI(i);
        networks[i].encType = WiFi.encryptionType(i);
        networks[i].channel = WiFi.channel(i);
    }
}

void drawWiFiList() {
    display.clear();
    display.setFont(ArialMT_Plain_10);
    display.setTextAlignment(TEXT_ALIGN_LEFT);
    
    // Draw header
    display.drawString(0, 0, "SSID (CH) RSSI");
    display.drawLine(0, 11, 128, 11);
    
    // Draw networks
    int displayCount = min(totalNetworks, 4); // Show 4 networks at a time
    for(int i = 0; i < displayCount; i++) {
        int networkIndex = i + scrollOffset;
        if(networkIndex < totalNetworks) {
            String networkInfo = networks[networkIndex].ssid;
            networkInfo += " (" + String(networks[networkIndex].channel) + ") ";
            networkInfo += String(networks[networkIndex].rssi) + "dB";
            
            // Truncate if too long
            if(networkInfo.length() > 21) {
                networkInfo = networkInfo.substring(0, 18) + "...";
            }
            
            display.drawString(0, 13 + (i * 13), networkInfo);
        }
    }
    
    // Draw scroll indicators if needed
    if(scrollOffset > 0) {
        display.drawString(120, 13, "^");
    }
    if(scrollOffset + 4 < totalNetworks) {
        display.drawString(120, 52, "v");
    }
    
    display.display();
}

void handleWiFiScan() {
    if(digitalRead(BUTTON_UP) == LOW && !buttonPressed) {
        buttonPressed = true;
        if(scrollOffset > 0) {
            scrollOffset--;
            drawWiFiList();
        }
        delay(200);
    }
    else if(digitalRead(BUTTON_DOWN) == LOW && !buttonPressed) {
        buttonPressed = true;
        if(scrollOffset + 4 < totalNetworks) {
            scrollOffset++;
            drawWiFiList();
        }
        delay(200);
    }
    else if(digitalRead(BUTTON_SELECT) == LOW && !buttonPressed) {
        buttonPressed = true;
        scanNetworks();
        scrollOffset = 0;
        drawWiFiList();
        delay(200);
    }
    else if(digitalRead(BUTTON_BACK) == LOW && !buttonPressed) {
        buttonPressed = true;
        currentState = MENU_MAIN;
        delay(200);
    }
    
    if(digitalRead(BUTTON_UP) == HIGH && digitalRead(BUTTON_DOWN) == HIGH &&
       digitalRead(BUTTON_SELECT) == HIGH && digitalRead(BUTTON_BACK) == HIGH) {
        buttonPressed = false;
    }
}

void handleTerminal() {
    display.clear();
    display.setFont(ArialMT_Plain_10);
    display.setTextAlignment(TEXT_ALIGN_LEFT);

    // Terminal submenu options
    const char* terminalOptions[] = {
        "Terminate ",
        "BLE SPAM", 
        "Sour Apple",
        "bad ble twin"
    };
    const int terminalOptionsCount = 4;

    // Draw terminal submenu
    for (int i = 0; i < terminalOptionsCount; i++) {
        if (i == selectedOption) {
            display.drawString(0, i * 16, ">");
        }
        display.drawString(10, i * 16, terminalOptions[i]);
    }
    display.display();

    // Handle button inputs
    if (digitalRead(BUTTON_UP) == LOW && !buttonPressed) {
        buttonPressed = true;
        if (selectedOption > 0) selectedOption--;
        delay(200);
    }
    else if (digitalRead(BUTTON_DOWN) == LOW && !buttonPressed) {
        buttonPressed = true;
        if (selectedOption < terminalOptionsCount - 1) selectedOption++;
        delay(200);
    }
    else if (digitalRead(BUTTON_SELECT) == LOW && !buttonPressed) {
        buttonPressed = true;
        switch (selectedOption) {
            case 0:
                sendCommandToESP32("Command 1");
                break;
            case 1:
                sendCommandToESP32("Command 2");
                break;
            case 2:
                sendCommandToESP32("Command 3");
                break;
            case 3:
                sendCommandToESP32("Command 4");
                break;
        }
        delay(200);
    }
    else if (digitalRead(BUTTON_BACK) == LOW && !buttonPressed) {
        buttonPressed = true;
        currentState = MENU_MAIN;
        delay(200);
    }

    if (digitalRead(BUTTON_UP) == HIGH && digitalRead(BUTTON_DOWN) == HIGH &&
        digitalRead(BUTTON_SELECT) == HIGH && digitalRead(BUTTON_BACK) == HIGH) {
        buttonPressed = false;
    }
}

void sendCommandToESP32(String command) {
    Serial.println(command);
    // Add your code to send the command over the serial connection to the ESP32
}

void handleButtons() {
    if (digitalRead(BUTTON_UP) == LOW && !buttonPressed) {
        buttonPressed = true;
        if (selectedOption > 0) selectedOption--;
        delay(200);
    }
    else if (digitalRead(BUTTON_DOWN) == LOW && !buttonPressed) {
        buttonPressed = true;
        if (selectedOption < mainMenuItems - 1) selectedOption++;
        delay(200);
    }
    else if (digitalRead(BUTTON_SELECT) == LOW && !buttonPressed) {
        buttonPressed = true;
        switch (selectedOption) {
            case 0: // WiFi Scan
                currentState = MENU_WIFI_SCAN;
                scanNetworks();
                scrollOffset = 0;
                drawWiFiList();
                break;
            case 1: // Packet Monitor
                currentState = MENU_PACKET_MON;
                setupWiFiSniffer();
                memset(values, 0, sizeof(values));
                break;
            case 2: // Terminal
                currentState = MENU_TERMINAL;
                break;
            case 3: // Code
                currentState = MENU_RADIO;
                drawRadioMenu();
                break;
        }
        delay(200);
    }
    else if (digitalRead(BUTTON_BACK) == LOW && !buttonPressed) {
        buttonPressed = true;
        currentState = MENU_MAIN;
        delay(200);
    }
    
    if (digitalRead(BUTTON_UP) == HIGH && digitalRead(BUTTON_DOWN) == HIGH &&
        digitalRead(BUTTON_SELECT) == HIGH && digitalRead(BUTTON_BACK) == HIGH) {
        buttonPressed = false;
    }
}



// Modified loop function
void loop() {
    switch (currentState) {
        case MENU_MAIN:
            drawMenu();
            handleButtons();
            break;
            
        case MENU_WIFI_SCAN:
            handleWiFiScan();
            break;
            
        case MENU_PACKET_MON:
            handlePacketMonitor();
            break;
            
        case MENU_TERMINAL:
            handleTerminal();
            break;
            
        case MENU_RADIO:
            drawRadioMenu();
            handleRadioSubmenu();
            break;
            
        case MENU_RADIO_TRANSMIT:
            handleTransmission();
            break;
            
        default:
            currentState = MENU_MAIN;
            break;
    }
}


// Modified setup function
void setup() {
    // Initialize serial
    Serial.begin(115200);
    
    // Initialize display
    display.init();
    display.setFont(ArialMT_Plain_10);
    
    // Initialize buttons and audio pin
    pinMode(BUTTON_UP, INPUT_PULLUP);
    pinMode(BUTTON_DOWN, INPUT_PULLUP);
    pinMode(BUTTON_SELECT, INPUT_PULLUP);
    pinMode(BUTTON_BACK, INPUT_PULLUP);
    pinMode(AUDIO_IN, OUTPUT);
    
    display.clear();
    display.drawXbm(0, 0, LOGO_WIDTH, LOGO_HEIGHT, logo_bmp);
    display.display();
    delay(2000);  // Show bitmap for 2 seconds
    
    // Show text splash screen
    display.clear();
    display.setFont(ArialMT_Plain_16);
    display.setTextAlignment(TEXT_ALIGN_CENTER);
    display.drawString(64, 10, "WiFi Monitor");
    display.setFont(ArialMT_Plain_10);
    display.drawString(64, 35, "v1.0");
    display.display();
    delay(2000);  // Show text for 2 seconds
    
    // Initialize WiFi
    WiFi.mode(WIFI_OFF);
    wifi_set_opmode(STATION_MODE);
}
void drawTransmissionScreen() {
    display.clear();
    display.setFont(ArialMT_Plain_16);
    display.setTextAlignment(TEXT_ALIGN_CENTER);
    
    // Show mode and frequency
    String modeStr = isAM ? "AM" : "FM";
    display.drawString(64, 0, modeStr + " Transmitting");
    
    display.setFont(ArialMT_Plain_24);
    if (isAM) {
        display.drawString(64, 20, String(currentAMFreq) + " kHz");
    } else {
        // Format FM frequency with decimal point
        String fmFreq = String(currentFMFreq / 1000.0, 1);
        display.drawString(64, 20, fmFreq + " MHz");
    }
    
    // Show controls
    display.setFont(ArialMT_Plain_10);
    display.drawString(64, 48, "UP/DOWN - Tune  BACK - Exit");
    display.display();
}

void handleTransmission() {
    if (!isTransmitting) return;
    
    unsigned long currentMillis = millis();
    
    if (digitalRead(BUTTON_UP) == LOW && !buttonPressed && 
        currentMillis - lastFreqUpdate > FREQ_UPDATE_DELAY) {
        buttonPressed = true;
        updateFrequency(true);
        lastFreqUpdate = currentMillis;
        drawTransmissionScreen();
    }
    else if (digitalRead(BUTTON_DOWN) == LOW && !buttonPressed && 
             currentMillis - lastFreqUpdate > FREQ_UPDATE_DELAY) {
        buttonPressed = true;
        updateFrequency(false);
        lastFreqUpdate = currentMillis;
        drawTransmissionScreen();
    }
    else if (digitalRead(BUTTON_BACK) == LOW && !buttonPressed) {
        buttonPressed = true;
        stopTransmission();
        delay(200);
    }
    
    if (digitalRead(BUTTON_UP) == HIGH && digitalRead(BUTTON_DOWN) == HIGH &&
        digitalRead(BUTTON_SELECT) == HIGH && digitalRead(BUTTON_BACK) == HIGH) {
        buttonPressed = false;
    }
}

void startTransmission(bool useAM) {
    isTransmitting = true;
    isAM = useAM;
    currentState = MENU_RADIO_TRANSMIT;
    
    // Set initial carrier frequency
    uint32_t carrierFreq = isAM ? currentAMFreq * 1000 : currentFMFreq * 1000;
    analogWriteFreq(carrierFreq);
    analogWrite(AUDIO_IN, 512);  // 50% duty cycle
    
    drawTransmissionScreen();
}

void stopTransmission() {
    isTransmitting = false;
    analogWrite(AUDIO_IN, 0);
    currentState = MENU_RADIO;
}

void drawRadioMenu() {
    display.clear();
    
    display.setFont(ArialMT_Plain_16);
    display.setTextAlignment(TEXT_ALIGN_LEFT);
    
    for (int i = 0; i < radioMenuItems; i++) {
        if (i == selectedOption) {
            display.drawString(0, i * 16, ">");
        }
        display.drawString(10, i * 16, radioMenu[i]);
    }
    display.display();
}

void handleRadioSubmenu() {
    if (digitalRead(BUTTON_UP) == LOW && !buttonPressed) {
        buttonPressed = true;
        if (selectedOption > 0) selectedOption--;
        delay(200);
    }
    else if (digitalRead(BUTTON_DOWN) == LOW && !buttonPressed) {
        buttonPressed = true;
        if (selectedOption < radioMenuItems - 1) selectedOption++;
        delay(200);
    }
    else if (digitalRead(BUTTON_SELECT) == LOW && !buttonPressed) {
        buttonPressed = true;
        startTransmission(selectedOption == 0);  // true for AM, false for FM
        delay(200);
    }
    else if (digitalRead(BUTTON_BACK) == LOW && !buttonPressed) {
        buttonPressed = true;
        currentState = MENU_MAIN;
        selectedOption = 0;
        delay(200);
    }
    
    if (digitalRead(BUTTON_UP) == HIGH && digitalRead(BUTTON_DOWN) == HIGH &&
        digitalRead(BUTTON_SELECT) == HIGH && digitalRead(BUTTON_BACK) == HIGH) {
        buttonPressed = false;
    }
}
